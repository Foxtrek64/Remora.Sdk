<Project>
    <Import Project="Sdk.tasks"/>
    
    <!--
        Fallback targeting properties - VS sets for DesignTime builds only TargetFramework
        but requires information about all TargetFrameworks
    -->
    <PropertyGroup Condition="'$(TargetFrameworks)' == ''">
        <!--suppress MsbuildTargetFrameworkTagInspection -->
        <TargetFrameworks>$(LibraryFrameworks)</TargetFrameworks>

        <!--suppress MsbuildTargetFrameworkTagInspection -->
        <TargetFrameworks Condition="'$(OutputType)' == 'Exe'">$(ExecutableFrameworks)</TargetFrameworks>
    </PropertyGroup>

    <!-- Forced common properties -->
    <PropertyGroup>
        <Deterministic>true</Deterministic>
        <DebugSymbols>true</DebugSymbols>
    </PropertyGroup>

    <!-- Fallback copyright properties -->
    <PropertyGroup Condition="'$(LegalCopyrightHolder)' == ''">
        <LegalCopyrightHolder>$(LegalAuthor)</LegalCopyrightHolder>
    </PropertyGroup>

    <!-- Fallback nuget properties -->
    <PropertyGroup Condition="'$(Authors)' == ''">
        <Authors>$(LegalAuthor)</Authors>
    </PropertyGroup>

    <PropertyGroup Condition="'$(IncludeBuildOutput)' == ''">
        <IncludeBuildOutput>true</IncludeBuildOutput>
    </PropertyGroup>

    <!-- Forced nuget properties -->
    <PropertyGroup>
        <Copyright>$(LegalCopyrightHolder) $([System.DateTime]::UtcNow.ToString(`yyyy`))</Copyright>

        <IncludeSymbols>$(IncludeBuildOutput)</IncludeSymbols>
        <IncludeSource>$(IncludeBuildOutput)</IncludeSource>
        <EmbedUntrackedSources>$(IncludeBuildOutput)</EmbedUntrackedSources>
        <EmbedAllSources>$(IncludeBuildOutput)</EmbedAllSources>

        <PublishRepositoryUrl>true</PublishRepositoryUrl>
        <SymbolPackageFormat>snupkg</SymbolPackageFormat>
        <PackageReadmeFile>README.md</PackageReadmeFile>
        <PackageLicenseExpression>$(LegalLicense)</PackageLicenseExpression>
    </PropertyGroup>

    <!-- Forced code inspection properties -->
    <PropertyGroup>
        <GenerateDocumentationFile>true</GenerateDocumentationFile>
        <AnalysisLevel>7</AnalysisLevel>
        <Nullable>enable</Nullable>
    </PropertyGroup>

    <!-- Analyzers -->
    <ItemGroup>
        <PackageReference Include="StyleCop.Analyzers" Version="1.2.0-beta.435" PrivateAssets="all" />
    </ItemGroup>

    <!-- Language support packages -->
    <ItemGroup>
        <PackageReference Include="Nullable" Version="1.3.1" PrivateAssets="all" />
        <PackageReference Include="IsExternalInit" Version="1.0.3" PrivateAssets="all" />
    </ItemGroup>

    <!-- JetBrains Annotations -->
    <ItemGroup>
        <PackageReference Include="JetBrains.Annotations" Version="2022.1.0" PrivateAssets="all" />
    </ItemGroup>

    <!-- SourceLink -->
    <ItemGroup Condition="'$(IsPackable)' == 'true'">
        <PackageReference Include="Microsoft.SourceLink.GitHub" Version="1.1.1" PrivateAssets="All"/>
    </ItemGroup>

    <!-- NuGet Icon -->
    <PropertyGroup Condition="'$(IsPackable)' == 'true' And Exists('$(PackageIconPath)')">
        <IconName>$([System.IO.Path]::GetFileName('$(PackageIconPath)'))</IconName>
        <PackageIcon>$(IconName)</PackageIcon>
    </PropertyGroup>

    <ItemGroup Condition="'$(IsPackable)' == 'true' And Exists('$(PackageIconPath)')">
        <None Include="$(PackageIconPath)" Pack="true" PackagePath="/">
            <Link>$(IconName)</Link>
            <InProject>false</InProject>
        </None>
    </ItemGroup>

    <!-- NuGet README -->
    <ItemGroup Condition="'$(IsPackable)' == 'true'">
        <None Include="$(MSBuildProjectDirectory)/README.md" Pack="true" PackagePath="/">
            <Link>README.md</Link>
        </None>
    </ItemGroup>

    <!-- Code coverage -->
    <ItemGroup Condition="'$(ExcludeNonRunnableFrameworksFromCoverage)' == 'true' And '$(TargetFramework.TrimEnd(`0123456789.`))' == 'netstandard'">
        <AssemblyAttribute Condition="'$(TargetFramework)' != 'netstandard2.0'" Include="System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage" />
    </ItemGroup>

    <!-- Status checks -->
    <Target Name="RemoraPackablePropertyChecks" Condition="'$(IsPackable)' == 'true'" BeforeTargets="Pack">
        <Warning
                Condition="'$(PackageTags)' == ''"
                Text="PackageTags is not set; consider setting it for better package discoverability."
        />
        <Warning
                Condition="'$(PackageProjectUrl)' == ''"
                Text="PackageProjectUrl is not set; consider setting it so customers can navigate more easily."
        />
    </Target>

    <!-- Stylecop configuration generation -->
    <PropertyGroup>
        <StylecopRuleset>$(MSBuildThisFileDirectory)/inspections/stylecop.ruleset</StylecopRuleset>
        <StylecopTemplatePath>$(MSBuildThisFileDirectory)/inspections/stylecop.template.json</StylecopTemplatePath>
        <StylecopOutputPath>$(BaseIntermediateOutputPath)/stylecop.json</StylecopOutputPath>
    </PropertyGroup>

    <PropertyGroup>
        <CodeAnalysisRuleSet>$(StylecopRuleset)</CodeAnalysisRuleSet>
    </PropertyGroup>


    <PropertyGroup Condition="'$(UseSPDXFileHeaders)' == 'true'">
        <LicenseTextFile>$(MSBuildThisFileDirectory)/license-headers/SPDX</LicenseTextFile>
    </PropertyGroup>

    <Target Name="GenerateStylecopJson" Condition="'$(HasGeneratedStylecopJson)' != 'true'" BeforeTargets="CompileDesignTime;Compile;PrepareForBuild;Restore">
        <PropertyGroup Condition="'$(LicenseTextFile)' == ''">
            <LicenseTextFile>$(MSBuildThisFileDirectory)/license-headers/$(LegalLicense)</LicenseTextFile>
        </PropertyGroup>

        <Error
                Condition="'$(LegalLicense)' == ''"
                Text="LegalLicense is not set; this must be a license expression denoting the license the source code is distributed under."
        />
        <Error
                Condition="'$(LegalAuthor)' == ''"
                Text="LegalAuthor is not set; this must be the name of the entity the source code was authored by."
        />
        <Error
                Condition="'$(LegalEmail)' == ''"
                Text="LegalEmail is not set; this must be the email address of the entity the source code was authored by."
        />
        <Error
                Condition="'$(LegalCopyrightHolder)' == ''"
                Text="LegalCopyrightHolder is not set; this must be the name of the entity the source code copyright belongs to."
        />
        <Error
                Condition="'$(LicenseTextFile)' == ''"
                Text="LicenseTextFile is not set; this must be a filesystem path to the license header text used for source code."
        />

        <PropertyGroup>
            <LicenseText>$([System.IO.File]::ReadAllText('$(LicenseTextFile)').Replace('%0a', '\n').Replace('%0d', '').Replace("/", "\/"))</LicenseText>
        </PropertyGroup>

        <PropertyGroup>
            <_StylecopTemplate>$([System.IO.File]::ReadAllText('$(StylecopTemplatePath)'))</_StylecopTemplate>
        </PropertyGroup>

        <ReplaceText
                InputText="$(_StylecopTemplate)"
                MatchExpression="__REMORA_COPYRIGHT_HOLDER_MARKER"
                ReplacementText="$(LegalCopyrightHolder)">
            <Output TaskParameter="OutputText" PropertyName="_StylecopTemplate" />
        </ReplaceText>

        <ReplaceText
                InputText="$(_StylecopTemplate)"
                MatchExpression="__REMORA_AUTHOR_MARKER"
                ReplacementText="$(LegalAuthor)">
            <Output TaskParameter="OutputText" PropertyName="_StylecopTemplate" />
        </ReplaceText>

        <ReplaceText
                InputText="$(_StylecopTemplate)"
                MatchExpression="__REMORA_EMAIL_MARKER"
                ReplacementText="$(LegalEmail)">
            <Output TaskParameter="OutputText" PropertyName="_StylecopTemplate" />
        </ReplaceText>

        <ReplaceText
                InputText="$(_StylecopTemplate)"
                MatchExpression="__REMORA_COPYRIGHT_TEXT_MARKER"
                ReplacementText="$(LicenseText)">
            <Output TaskParameter="OutputText" PropertyName="_StylecopTemplate" />
        </ReplaceText>

        <ReplaceText
                InputText="$(_StylecopTemplate)"
                MatchExpression="__REMORA_LICENSE_EXPRESSION_MARKER"
                ReplacementText="$(LegalLicense)">
            <Output TaskParameter="OutputText" PropertyName="_StylecopTemplate" />
        </ReplaceText>

        <WriteLinesToFile
                File="$(StylecopOutputPath)"
                Lines="$(_StylecopTemplate)"
                Overwrite="true"
                WriteOnlyWhenDifferent="true" />

        <Message Text="Generated stylecop.json" />
        
        <CreateProperty Value="true">
            <Output TaskParameter="Value" PropertyName="HasGeneratedStylecopJson" />
        </CreateProperty>
    </Target>

    <ItemGroup>
        <AdditionalFiles Include="$(StylecopOutputPath)">
            <Link>stylecop.json</Link>
            <InProject>false</InProject>
        </AdditionalFiles>
        <AdditionalFiles Include="$(StylecopRuleset)">
            <Link>stylecop.ruleset</Link>
            <InProject>false</InProject>
        </AdditionalFiles>
    </ItemGroup>

    <!-- Import at last to respect set properties -->
    <Import Project="Sdk.targets" Sdk="Microsoft.NET.Sdk" />
</Project>
